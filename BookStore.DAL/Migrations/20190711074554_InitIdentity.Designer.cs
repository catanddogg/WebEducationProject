// <auto-generated />
using System;
using BookStore.DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.DAL.Migrations
{
    [DbContext(typeof(BooksContext))]
    [Migration("20190711074554_InitIdentity")]
    partial class InitIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.DAL.Models.Avtor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<string>("NameAvtor");

                    b.Property<string>("Publisher");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Avtors");

                    b.HasData(
                        new { Id = 1, BookId = 1, NameAvtor = "test", Publisher = "test2" },
                        new { Id = 2, BookId = 2, NameAvtor = "test", Publisher = "test2" },
                        new { Id = 3, BookId = 3, NameAvtor = "test", Publisher = "test2" },
                        new { Id = 4, BookId = 4, NameAvtor = "test", Publisher = "test2" }
                    );
                });

            modelBuilder.Entity("BookStore.DAL.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new { Id = 1, Name = "test" },
                        new { Id = 2, Name = "test" },
                        new { Id = 3, Name = "test" },
                        new { Id = 4, Name = "test" }
                    );
                });

            modelBuilder.Entity("BookStore.DAL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId");

                    b.Property<int>("CategoryType");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Categories");

                    b.HasData(
                        new { Id = 1, BookId = 1, CategoryType = 1 },
                        new { Id = 2, BookId = 2, CategoryType = 3 },
                        new { Id = 3, BookId = 3, CategoryType = 6 },
                        new { Id = 4, BookId = 4, CategoryType = 24 }
                    );
                });

            modelBuilder.Entity("BookStore.DAL.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message");

                    b.Property<string>("UserName");

                    b.Property<DateTime>("createTime");

                    b.HasKey("Id");

                    b.ToTable("Comments");

                    b.HasData(
                        new { Id = 1, Message = "Hello", UserName = "user1", createTime = new DateTime(2019, 7, 11, 10, 45, 54, 199, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("BookStore.DAL.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("FirstName");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.Property<string>("RefreshToken");

                    b.Property<string>("Role");

                    b.Property<string>("SecondName");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new { Id = 1, Age = 18, FirstName = "user1", Login = "TestUser1", Password = "12345", Role = "user", SecondName = "user2" },
                        new { Id = 2, Age = 27, FirstName = "user3", Login = "TestUser3", Password = "1234", Role = "user", SecondName = "user4" },
                        new { Id = 3, Age = 36, FirstName = "user5", Login = "TestUser2", Password = "123456", Role = "admin", SecondName = "user6" }
                    );
                });

            modelBuilder.Entity("BookStore.DAL.Models.Avtor", b =>
                {
                    b.HasOne("BookStore.DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.DAL.Models.Category", b =>
                {
                    b.HasOne("BookStore.DAL.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
